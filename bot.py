import discord
from discord.ext import commands, tasks
import os
from dotenv import load_dotenv
import datetime
import asyncio

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

TOKEN = os.getenv('TOKEN')
GUILD_ID = int(os.getenv('GUILD_ID'))
CHANNEL_ID = int(os.getenv('CHANNEL_ID'))
IMPORTANT_ROLE = "Summary"

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–Ω—Ç—ñ–≤
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = commands.Bot(command_prefix="!", intents=intents)

# –°–ø–∏—Å–æ–∫ –≤–∞–∂–ª–∏–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
important_messages = []

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –º–∞—î –∞–≤—Ç–æ—Ä —Ä–æ–ª—å Summary
def has_summary_role(member):
    return any(role.name == IMPORTANT_ROLE for role in member.roles)

# –ü–æ–¥—ñ—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
@bot.event
async def on_ready():
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π —è–∫ {bot.user}")
    await fetch_recent_messages()
    daily_summary.start()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–æ—Ä—É —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
async def fetch_recent_messages():
    guild = bot.get_guild(GUILD_ID)
    if not guild:
        print("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä.")
        return

    now = datetime.datetime.utcnow()
    yesterday = now - datetime.timedelta(days=1)

    for channel in guild.text_channels:
        if not channel.permissions_for(guild.me).read_message_history:
            continue  # —è–∫—â–æ –±–æ—Ç –Ω–µ –º–∞—î –ø—Ä–∞–≤ —á–∏—Ç–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–∞–Ω–∞–ª

        try:
            async for message in channel.history(after=yesterday, limit=None):
                if message.author.bot:
                    continue
                member = guild.get_member(message.author.id)
                if member and has_summary_role(member):
                    important_messages.append(message)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∫–∞–Ω–∞–ª—É {channel.name}: {e}")

# –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
@bot.event
async def on_message(message):
    if message.author.bot:
        return

    guild = bot.get_guild(GUILD_ID)
    member = guild.get_member(message.author.id)

    if member and has_summary_role(member):
        important_messages.append(message)

    await bot.process_commands(message)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –æ 6 —Ä–∞–Ω–∫—É –∑–∞ –ö–∏—î–≤–æ–º
@tasks.loop(minutes=1)
async def daily_summary():
    now = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(hours=3)  # –ö–∏—ó–≤ = UTC+3
    if now.hour == 6 and now.minute == 0:
        await send_digest()

# –§—É–Ω–∫—Ü—ñ—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
async def send_digest():
    channel = bot.get_channel(CHANNEL_ID)
    if important_messages:
        today = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(hours=3)
        yesterday = today - datetime.timedelta(days=1)

        embed = discord.Embed(
            title=f"üìö –í—ã–∂–∏–º–∫–∞ 2TOP SQUAD {yesterday.strftime('%d.%m')}-{today.strftime('%d.%m')}",
            color=discord.Color.blue()
        )

        for msg in important_messages:
            content_preview = msg.content.split('\n')[0][:100]
            if content_preview.lower().startswith("!digest"):
                continue  # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É !digest

            if not content_preview:
                content_preview = "–ë–µ–∑ —Ç–µ–∫—Å—Ç—É (–º–æ–∂–ª–∏–≤–æ —Ç—ñ–ª—å–∫–∏ –≤–∫–ª–∞–¥–µ–Ω–Ω—è)"

            embed.add_field(
                name=f"#{msg.channel.name} ‚Äì {content_preview}",
                value=f"[–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è]({msg.jump_url})",
                inline=False
            )

        await channel.send(embed=embed)
        important_messages.clear()
    else:
        channel = bot.get_channel(CHANNEL_ID)
        await channel.send("‚ÑπÔ∏è –ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –≤–∞–∂–ª–∏–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–∞ —Ü–µ–π –º–æ–º–µ–Ω—Ç.")

# –†—É—á–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
@bot.command()
async def digest(ctx):
    await send_digest()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.run(TOKEN)
